stages:
  - analysis

analyze_code:
  stage: analysis
  image: debian:bookworm
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    MESSAGE_URL: 'https://api.app.plexicus.ai/receive_plexalyzer_message'
    FILES_PATH: "files_to_scan.json"
  script:
    # Install dependencies
    - echo "Installing dependencies..."
    - apt-get update && apt-get install -y jq git docker.io

    # Checkout code
    - echo "Checking out code..."
    - git fetch --all --depth=1
    - git checkout "$CI_COMMIT_REF_NAME"

    # Detect changed files based on event type
    - |
      if [ "$CI_PIPELINE_SOURCE" == "merge_request_event" ]; then
        echo "Analyzing changed files in the MR..."
        git fetch origin "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
        git diff --name-only "origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" "$CI_COMMIT_REF_NAME" > files_to_scan.json
      else
        echo "Analyzing all files in the repository..."
        git ls-files > files_to_scan.json
      fi

    # Prepare files for analysis
    - echo "Preparing files for analysis..."
    - if [ -s files_to_scan.json ]; then
        jq -R -s -c 'split("\n")[:-1]' files_to_scan.json > files_to_analyze.txt;
      else
        echo "No files to analyze.";
        exit 1;
      fi

    # Run Plexalyzer
    - echo "Running Plexalyzer..."
    - docker run --rm 
      -e PLEXALYZER_TOKEN="$PLEXALYZER_TOKEN" 
      -e MESSAGE_URL="$MESSAGE_URL" 
      -v "$CI_PROJECT_DIR:/mounted_volumes" 
      -v "$CI_PROJECT_DIR/files_to_analyze.txt:/app/files_to_analyze.txt" 
      plexicus/plexalyzer:latest 
      /venvs/plexicus-fastapi/bin/python /app/analyze.py 
      --repository_id "$REPO_ID" 
      --name "$CI_PROJECT_PATH" 
      --branch "$CI_COMMIT_REF_NAME" 
      --url "$CI_REPOSITORY_URL" 
      --pr-id "$CI_MERGE_REQUEST_IID" 
      --no-progress-bar
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "<BRANCH>"
      when: always
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "<BRANCH>"
      when: always
      allow_failure: true
    - when: never
